---
import { getCollection, type CollectionEntry } from "astro:content";
import { getStyleColor } from "../content/config";

let timelineEntries: CollectionEntry<"timeline">[] = [];
let error: string | null = null;

try {
  timelineEntries = await getCollection("timeline");
} catch (e) {
  error = "Failed to load timeline entries. Please try refreshing the page.";
  console.error("Error loading timeline:", e);
}

const sortedEntries = timelineEntries.sort(
  (a: CollectionEntry<"timeline">, b: CollectionEntry<"timeline">) => {
    return a.data.date.localeCompare(b.data.date);
  }
);

// Render markdown content for each entry
const entriesWithContent = await Promise.all(
  sortedEntries.map(async (entry) => {
    const { Content } = await entry.render();
    return { entry, Content };
  })
);

// Helper function to safely parse year from date string
function parseYear(dateString: string): number {
  try {
    // Handle YYYY-MM-DD format - extract year directly from string
    if (dateString.includes('-')) {
      const year = parseInt(dateString.split('-')[0], 10);
      return isNaN(year) ? 0 : year;
    }
    // Handle YYYY format
    const year = parseInt(dateString, 10);
    return isNaN(year) ? 0 : year;
  } catch (e) {
    console.error("Error parsing date:", dateString, e);
    return 0;
  }
}
---

{error ? (
  <div class="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg" role="alert">
    <p class="font-medium">Error</p>
    <p class="text-sm">{error}</p>
  </div>
) : sortedEntries.length === 0 ? (
  <div class="bg-blue-50 border border-blue-200 text-blue-700 px-4 py-3 rounded-lg" role="alert">
    <p class="font-medium">No entries found</p>
    <p class="text-sm">There are no timeline entries to display yet. Add some entries to get started!</p>
  </div>
) : (
<div>
  <!-- Search Bar -->
  <div class="mb-6">
    <div class="relative">
      <input
        type="text"
        id="timeline-search"
        placeholder="Search by title, location, or description..."
        class="w-full px-4 py-3 pl-11 border border-gray-300 rounded-lg focus:ring-2 focus:ring-offset-2 shadow-sm"
        style="--tw-ring-color: rgb(226, 111, 4);"
        aria-label="Search timeline entries"
      />
      <svg class="absolute left-3 top-3.5 h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
    </div>
  </div>

  <!-- No Results Message -->
  <div id="no-results" class="hidden bg-yellow-50 border border-yellow-200 text-yellow-700 px-4 py-3 rounded-lg mb-4">
    <p class="font-medium">No matching entries found</p>
    <p class="text-sm">Try adjusting your search.</p>
  </div>

  <!-- Table -->
  <div class="overflow-x-auto">
  <table class="w-full bg-white shadow-md rounded-lg overflow-hidden">
    <thead class="text-white" style="background-color: rgb(226, 111, 4);">
      <tr>
        <th class="px-6 py-3 text-left text-sm font-semibold">Date</th>
        <th class="px-6 py-3 text-left text-sm font-semibold">Title</th>
        <th class="px-6 py-3 text-left text-sm font-semibold">Location</th>
        <th class="px-6 py-3 text-left text-sm font-semibold">Architectural Style</th>
      </tr>
    </thead>
    <tbody class="divide-y divide-gray-200">
      {
        entriesWithContent.map(
          ({ entry }, index) => (
            <tr class={index % 2 === 0 ? "bg-white" : "bg-gray-50"}>
              <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                {parseYear(entry.data.date)}
              </td>
              <td class="px-6 py-4 text-sm">
                <button
                  class="view-details-btn text-left font-medium focus:outline-none focus:ring-2 focus:ring-offset-2 rounded transition-all"
                  style="color: rgb(226, 111, 4); --tw-ring-color: rgb(226, 111, 4);"
                  onmouseover="this.style.color='rgb(180, 83, 9)'; this.style.textDecoration='underline'; this.style.textDecorationColor='rgb(180, 83, 9)'; this.style.textDecorationThickness='2px'"
                  onmouseout="this.style.color='rgb(226, 111, 4)'; this.style.textDecoration='none'"
                  data-entry-id={`entry-${index}`}
                  title="Click to view full details"
                >
                  {entry.data.title}
                </button>
              </td>
              <td class="px-6 py-4 text-sm text-gray-600">
                <button
                  class="view-on-map-btn text-left transition-colors focus:outline-none"
                  style="--hover-color: rgb(226, 111, 4);"
                  data-lat={entry.data.latitude}
                  data-lng={entry.data.longitude}
                  data-title={entry.data.title}
                  title="View on map"
                  onmouseover="this.style.color='rgb(226, 111, 4)'"
                  onmouseout="this.style.color=''"
                  onfocus="this.style.color='rgb(226, 111, 4)'"
                  onblur="this.style.color=''"
                >
                  <div class="flex items-center gap-1">
                    <svg class="w-4 h-4 flex-shrink-0" style="color: rgb(226, 111, 4);" fill="currentColor" viewBox="0 0 20 20">
                      <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"/>
                    </svg>
                    <span class="underline decoration-dotted">
                      {(() => {
                        const address = entry.data.address || entry.data.location;
                        // Remove ", Santa Cruz, California" and ", Santa Cruz" and ", California" variations
                        return address
                          .replace(/, Santa Cruz, California$/i, '')
                          .replace(/, Santa Cruz$/i, '')
                          .replace(/, California$/i, '');
                      })()}
                    </span>
                  </div>
                </button>
              </td>
              <td class="px-6 py-4 text-sm text-gray-600">
                {(() => {
                  const style = entry.data.architectural_style || "N/A";
                  const colors = getStyleColor(style);
                  return (
                    <span
                      class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium"
                      style={`background-color: ${colors.bg}; color: ${colors.text};`}
                    >
                      {style}
                    </span>
                  );
                })()}
              </td>
            </tr>
          )
        )
      }
    </tbody>
  </table>
  </div>
</div>
)}

<!-- Hidden content for modal (each entry's full markdown) -->
{entriesWithContent.map(({ entry, Content }, index) => (
  <div
    id={`entry-${index}`}
    class="hidden entry-content"
    data-title={entry.data.title}
    data-year={parseYear(entry.data.date)}
    data-location={entry.data.location}
    data-address={entry.data.address || ''}
    data-style={entry.data.architectural_style || ''}
    data-sources={JSON.stringify(entry.data.sources || [])}
  >
    <Content />
  </div>
))}

<!-- Modal -->
<div id="details-modal" class="hidden fixed inset-0 z-50 overflow-y-auto" aria-labelledby="modal-title" role="dialog" aria-modal="true">
  <!-- Backdrop -->
  <div class="fixed inset-0 bg-gray-900 bg-opacity-75 transition-opacity" id="modal-backdrop"></div>

  <!-- Modal Content -->
  <div class="flex min-h-full items-center justify-center p-4 sm:p-0">
    <div class="relative transform overflow-hidden rounded-lg bg-white text-left shadow-xl transition-all w-full max-w-4xl sm:my-8">
      <!-- Header -->
      <div class="px-4 py-4 sm:px-6" style="background-color: rgb(226, 111, 4);">
        <div class="flex items-start justify-between">
          <div class="flex-1">
            <h3 class="text-xl font-semibold text-white" id="modal-title"></h3>
            <p class="mt-1 text-sm opacity-90 text-white" id="modal-subtitle"></p>
          </div>
          <button
            type="button"
            class="ml-3 inline-flex rounded-md text-white focus:outline-none focus:ring-2 focus:ring-white p-2"
            style="background-color: rgb(180, 83, 9);"
            onmouseover="this.style.backgroundColor='rgb(154, 52, 18)'"
            onmouseout="this.style.backgroundColor='rgb(180, 83, 9)'"
            id="close-modal"
            aria-label="Close modal"
          >
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>
      </div>

      <!-- Body -->
      <div class="bg-white px-4 py-5 sm:p-6">
        <div class="space-y-4">
          <!-- Location Info -->
          <div id="modal-location" class="text-sm text-gray-600"></div>

          <!-- Architectural Style Badge -->
          <div id="modal-style-container">
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 text-blue-800" id="modal-style"></span>
          </div>

          <!-- Rich Content Area -->
          <div id="modal-content" class="prose prose-sm max-w-none">
            <!-- Content will be injected here -->
          </div>

          <!-- Sources -->
          <div id="modal-sources-container" class="hidden pt-4 border-t border-gray-200">
            <h4 class="font-semibold text-gray-900 mb-2">Sources:</h4>
            <ul class="space-y-1 text-sm" id="modal-sources"></ul>
          </div>
        </div>
      </div>

      <!-- Footer -->
      <div class="bg-gray-50 px-4 py-3 sm:flex sm:flex-row-reverse sm:px-6">
        <button
          type="button"
          class="inline-flex w-full justify-center rounded-md px-4 py-2 text-sm font-semibold text-white shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 sm:ml-3 sm:w-auto"
          style="background-color: rgb(226, 111, 4); --tw-ring-color: rgb(226, 111, 4);"
          onmouseover="this.style.backgroundColor='rgb(180, 83, 9)'"
          onmouseout="this.style.backgroundColor='rgb(226, 111, 4)'"
          id="close-modal-footer"
        >
          Close
        </button>
      </div>
    </div>
  </div>
</div>

<script>
  import { getStyleColor } from "../utils/styleColors";

  // Modal functionality
  const modal = document.getElementById('details-modal');
  const modalBackdrop = document.getElementById('modal-backdrop');
  const closeButtons = [document.getElementById('close-modal'), document.getElementById('close-modal-footer'), modalBackdrop];

  function openModal(entryId: string) {
    const entryElement = document.getElementById(entryId);
    if (!entryElement) return;

    const modalTitle = document.getElementById('modal-title');
    const modalSubtitle = document.getElementById('modal-subtitle');
    const modalLocation = document.getElementById('modal-location');
    const modalStyleContainer = document.getElementById('modal-style-container');
    const modalStyle = document.getElementById('modal-style');
    const modalContent = document.getElementById('modal-content');
    const modalSourcesContainer = document.getElementById('modal-sources-container');
    const modalSources = document.getElementById('modal-sources');

    // Get data from the hidden entry element
    const title = entryElement.dataset.title || '';
    const year = entryElement.dataset.year || '';
    const location = entryElement.dataset.location || '';
    const address = entryElement.dataset.address || '';
    const style = entryElement.dataset.style || 'N/A';
    const sources = JSON.parse(entryElement.dataset.sources || '[]');

    if (modalTitle) modalTitle.textContent = title;
    if (modalSubtitle) modalSubtitle.textContent = `${year} • ${location}`;

    if (modalLocation && address) {
      modalLocation.textContent = address;
      modalLocation.classList.remove('hidden');
    } else if (modalLocation) {
      modalLocation.classList.add('hidden');
    }

    if (modalStyleContainer && modalStyle) {
      const colors = getStyleColor(style);

      modalStyle.textContent = style;
      modalStyle.className = 'inline-flex items-center px-3 py-1 rounded-full text-sm font-medium';
      modalStyle.style.backgroundColor = colors.bg;
      modalStyle.style.color = colors.text;
      modalStyleContainer.classList.remove('hidden');
    }

    // Clone and insert the rich content
    if (modalContent) {
      modalContent.innerHTML = entryElement.innerHTML;
    }

    // Handle sources
    if (sources.length > 0 && modalSourcesContainer && modalSources) {
      modalSources.innerHTML = sources.map((source: any) => `
        <li class="flex items-start">
          <svg class="h-5 w-5 mr-2 flex-shrink-0" style="color: rgb(226, 111, 4);" fill="currentColor" viewBox="0 0 20 20">
            <path d="M11 3a1 1 0 100 2h2.586l-6.293 6.293a1 1 0 101.414 1.414L15 6.414V9a1 1 0 102 0V4a1 1 0 00-1-1h-5z"/>
            <path d="M5 5a2 2 0 00-2 2v8a2 2 0 002 2h8a2 2 0 002-2v-3a1 1 0 10-2 0v3H5V7h3a1 1 0 000-2H5z"/>
          </svg>
          ${source.url ? `<a href="${source.url}" target="_blank" rel="noopener noreferrer" style="color: rgb(226, 111, 4);" onmouseover="this.style.textDecoration='underline'" onmouseout="this.style.textDecoration='none'">${source.title}</a>` : source.title}
        </li>
      `).join('');
      modalSourcesContainer.classList.remove('hidden');
    } else if (modalSourcesContainer) {
      modalSourcesContainer.classList.add('hidden');
    }

    if (modal) {
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
    }
  }

  function closeModal() {
    if (modal) {
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    }
  }

  // Add click handlers to all view details buttons
  document.querySelectorAll('.view-details-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      const btn = e.target as HTMLButtonElement;
      const entryId = btn.dataset.entryId;
      if (entryId) {
        openModal(entryId);
      }
    });
  });

  // Close modal handlers
  closeButtons.forEach(btn => {
    if (btn) {
      btn.addEventListener('click', closeModal);
    }
  });

  // ESC key to close
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && modal && !modal.classList.contains('hidden')) {
      closeModal();
    }
  });

  // Handle "View on Map" clicks
  document.querySelectorAll('.view-on-map-btn').forEach(button => {
    button.addEventListener('click', (e) => {
      const btn = e.currentTarget as HTMLButtonElement;
      const lat = parseFloat(btn.dataset.lat || '0');
      const lng = parseFloat(btn.dataset.lng || '0');
      const title = btn.dataset.title || '';

      // Store the location data for the map to use
      window.sessionStorage.setItem('mapCenter', JSON.stringify({ lat, lng, title }));

      // Switch to map tab
      const mapTab = document.getElementById('map-tab');
      if (mapTab) {
        mapTab.click();
      }

      // Dispatch custom event for map to listen to
      window.dispatchEvent(new CustomEvent('centerMap', {
        detail: { lat, lng, title }
      }));
    });
  });

  // Search functionality
  const searchInput = document.getElementById('timeline-search') as HTMLInputElement;
  const noResults = document.getElementById('no-results') as HTMLElement;
  const tableRows = document.querySelectorAll('tbody tr');

  function searchTable() {
    const searchTerm = searchInput.value.toLowerCase().trim();
    let visibleCount = 0;

    tableRows.forEach((row) => {
      const rowElement = row as HTMLElement;
      const titleCell = rowElement.querySelector('td:nth-child(2)');
      const locationCell = rowElement.querySelector('td:nth-child(3)');

      if (!titleCell || !locationCell) return;

      const title = titleCell.textContent?.toLowerCase() || '';
      const location = locationCell.textContent?.toLowerCase() || '';

      // Check search match
      const matchesSearch = !searchTerm ||
        title.includes(searchTerm) ||
        location.includes(searchTerm);

      // Show/hide row
      if (matchesSearch) {
        rowElement.style.display = '';
        visibleCount++;
      } else {
        rowElement.style.display = 'none';
      }
    });

    // Show/hide no results message
    if (visibleCount === 0 && searchTerm) {
      noResults.classList.remove('hidden');
    } else {
      noResults.classList.add('hidden');
    }
  }

  // Event listener
  if (searchInput) {
    searchInput.addEventListener('input', searchTable);
  }
</script>
